---
description:
globs:
alwaysApply: false
---
# Technical Stack

## Frontend

- **Framework**: React 18+ with TypeScript
- **State Management**: Redux Toolkit for global state, React Query for server state
- **UI Components**: Custom component library with design system
- **Styling**: Tailwind CSS with custom theme
- **Visualization**: D3.js for protocol flow visualization, react-diff-viewer for response comparisons
- **Testing**: Vitest, React Testing Library, Playwright for E2E

## Backend

- **Runtime**: Node.js 20+ with TypeScript
- **API Server**: Express.js with WebSocket support
- **Process Management**: PM2 for MCP server process orchestration
- **Caching**: Redis for session and request caching
- **Database**: SQLite for development, PostgreSQL for production

## MCP Implementation

- **Protocol**: Full implementation of MCP Host and Client specifications
- **Transports**: Support for HTTP/SSE, WebSocket, and stdio transports
- **Security**: JWT-based authentication, configurable permission model
- **History**: Persistent storage of test history with search capabilities

## Development Tools

- **Build**: Vite for frontend, tsup for backend
- **Linting**: ESLint with custom ruleset
- **Formatting**: Prettier
- **Documentation**: Typedoc for API docs, Storybook for component documentation
- **CI/CD**: GitHub Actions

## Deployment

- **Containerization**: Docker for consistent environments
- **Configuration**: Environment variables with schema validation
- **Monitoring**: Prometheus and Grafana for metrics
- **Logging**: Structured JSON logging with Winston
